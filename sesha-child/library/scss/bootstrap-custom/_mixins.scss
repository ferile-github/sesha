// Buttons - from Boostrap
// -----------------------------------
@use "sass:math";

// Ammended default button variant mixin from bootstrap-4/mixins/buttons.scss
@mixin button-variant-sesha(
	$background,
	$border,
	$color: color-contrast($background),
	$hover-background:
		if(
			$color == $color-contrast-light,
			shade-color($background, $btn-hover-bg-shade-amount),
			tint-color($background, $btn-hover-bg-tint-amount)
		),
	$hover-border:
		if(
			$color == $color-contrast-light,
			shade-color($border, $btn-hover-border-shade-amount),
			tint-color($border, $btn-hover-border-tint-amount)
		),
	$hover-color: color-contrast($hover-background),
	$active-background:
		if(
			$color == $color-contrast-light,
			shade-color($background, $btn-active-bg-shade-amount),
			tint-color($background, $btn-active-bg-tint-amount)
		),
	$active-border:
		if(
			$color == $color-contrast-light,
			shade-color($border, $btn-active-border-shade-amount),
			tint-color($border, $btn-active-border-tint-amount)
		),
	$active-color: color-contrast($active-background),
	$disabled-background: $background,
	$disabled-border: $border,
	$disabled-color: color-contrast($disabled-background)
) {
	color: $color;
	@include gradient-bg($background);
	border-color: $border;
	@include box-shadow($btn-box-shadow);

	&:hover {
		color: $hover-color;
		@include gradient-bg($hover-background);
		border-color: $hover-border;
	}

	&:focus {
		color: $hover-color;
		@include gradient-bg($hover-background);
		border-color: $hover-border;
		@if $enable-shadows {
			@include box-shadow($btn-box-shadow, 0 0 0 $btn-focus-width rgba(mix($color, $border, 15%), 0.5) );
		} @else {
			// Avoid using mixin so we can pass custom focus shadow properly
			box-shadow: 0 0 0 $btn-focus-width rgba(mix($color, $border, 15%), 0.5);
		}
	}

	&:active,
	&.active {
		color: $active-color;
		background-color: $active-background;
		// Remove CSS gradients if they're enabled
		background-image: if($enable-gradients, none, null);
		border-color: $active-border;

		&:focus {
			@if $enable-shadows {
				@include box-shadow($btn-active-box-shadow,	0 0 0 $btn-focus-width rgba(mix($color, $border, 15%), 0.5)	);
			} @else {
				// Avoid using mixin so we can pass custom focus shadow properly
				box-shadow: 0 0	0 $btn-focus-width rgba(mix($color, $border, 15%), 0.5);
			}
		}
	}

	&:disabled,
	&.disabled {
		color: $white;
		background-color: $dark;
		// Remove CSS gradients if they're enabled
		background-image: if($enable-gradients, none, null);
		border-color: $dark;
	}
}


@mixin button-outline-variant-sesha(
	$color,
	$color-hover: color-contrast($color),
	$active-background: $color,
	$active-border: $color,
	$active-color: color-contrast($active-background)
) {
	color: $color;
	border-color: $color;

	&:hover {
		color: $color-hover;
		background-color: $active-background;
		border-color: $active-border;
	}

	.btn-check:focus + &,
	&:focus {
		box-shadow: 0 0 0 $btn-focus-width rgba($color, 0.5);
	}

	.btn-check:checked + &,
	.btn-check:active + &,
	&:active,
	&.active,
	&.dropdown-toggle.show {
		color: $active-color;
		background-color: $active-background;
		border-color: $active-border;

		&:focus {
			@if $enable-shadows {
				@include box-shadow(
					$btn-active-box-shadow,
					0 0 0 $btn-focus-width rgba($color, 0.5)
				);
			} @else {
				// Avoid using mixin so we can pass custom focus shadow properly
				box-shadow: 0 0 0 $btn-focus-width rgba($color, 0.5);
			}
		}
	}

	&:disabled,
	&.disabled {
		color: $color;
		background-color: transparent;
	}
}

// Button sizes
@mixin button-size-sesha($padding-y, $padding-x, $font-size, $border-radius) {
	padding: $padding-y $padding-x;
	@include font-size($font-size);
	// Manually declare to provide an override to the browser default
	@include border-radius($border-radius, 0);
}


// Create Filter Checkboxes for PLP
// -----------------------------------
@mixin filter-checkbox() {
	&:before {
		@extend .fa;
		content: "";

		display: flex;
		align-items: center;
		justify-content: center;

		width: 1rem;
		height: 1rem;
		border: 1px solid $input-border-color;
		background: $white;
		vertical-align: middle;
		margin: 0 $m-xs 0 0;
		transition: 500ms border-color ease-in-out;
	}
	&:hover:before {
		border-color: $gray-500;
		content: $fa-var-close;
		color: $gray-500;
	}
}

@mixin filter-checkbox-checked() {
	&:before {
		content: $fa-var-close;
		color: $body-color;
	}
}

// Site overlays
// -----------------------------------
@mixin make-site-overlay($zindex: $zmax) {
	position: fixed;
	z-index: $zindex;
	opacity: 0;
	cursor: pointer;
	transition: opacity $navbar-speed-mobile ease-in-out;
	background: rgba(0, 0, 0, 0.4);
}
@mixin show-site-overlay() {
	top: 0;
	left: 0;
	right: 0;
	bottom: 0;
	opacity: 1;
}

// Make a Dropdown or expanding panel
// -----------------------------------
@mixin make-dropdown() {
	max-height: 0;
	opacity: 0;
	overflow: hidden;
}
@mixin show-dropdown($height: 1000px) {
	max-height: $height;
	opacity: 1;
	overflow: visible;
}



// Responsive Text
// -----------------------------------
@function strip-unit($value) {
	@return math.div($value, $value * 0 + 1);
}

@mixin fluid-type($min-vw, $max-vw, $min-font-size, $max-font-size) {
	$u1: unit($min-vw);
	$u2: unit($max-vw);
	$u3: unit($min-font-size);
	$u4: unit($max-font-size);

	@if $u1 == $u2 and $u1 == $u3 and $u1 == $u4 {
		& {
			font-size: $min-font-size;
			@media screen and (min-width: $min-vw) {
				font-size: calc(
					#{$min-font-size} + #{strip-unit(
							$max-font-size - $min-font-size
						)} *
						(
							(100vw - #{$min-vw}) / #{strip-unit(
									$max-vw - $min-vw
								)}
						)
				);
			}
			@media screen and (min-width: $max-vw) {
				font-size: $max-font-size;
			}
		}
	}
}

// Usage
// $min_width: 320px;
// $max_width: 1200px;
// $min_font: 16px;
// $max_font: 24px;

// p {
//   @include fluid-type($min_width, $max_width, $min_font, $max_font);
// }


// Font Families
// -----------------------------------
@mixin font-face($name, $filename) {
	@font-face {
		font-family: $name;
		src: url("#{$filename}.woff") format("woff");
		font-style: normal;
		font-weight: $font-weight-normal;
		-webkit-font-smoothing: antialiased;
		-moz-osx-font-smoothing: grayscale;
	}
}

@mixin font-face-extended($name, $weight, $style, $filename, $extension: woff) {
	@font-face {
		font-family: $name;
		src: url("#{$filename}.#{$extension}") format('#{$extension}');
		font-style: $style;
		font-weight: $weight;
		-webkit-font-smoothing: antialiased;
		-moz-osx-font-smoothing: grayscale;
	}
}

@mixin clearfix() {
	*zoom: 1;
	&:before,
	&:after {
		content: "";
		display: table;
	}
	&:after {
		clear: both;
	}
}

// Used on the helper classes : menu, menu-horz-block, menu-horz-inline, menu-vert
@mixin menu-mixin() {
	margin: 0;
	padding: 0;
	li {
		list-style: none;
	}
	a {
		text-decoration: none;
	}
}

@mixin menu() {
	@include clearfix();
	li {
		display: inline-block;
	}
}

@mixin mediaright() {
	@include clearfix();

	img {
		float: right;
		height: auto;
	}
}

@mixin medialeft() {
	@include clearfix();

	img {
		float: right;
		height: auto;
	}
}

@mixin loader() {
	&::before {
		height: 1em;
		width: 1em;
		display: block;
		position: absolute;
		top: 50%;
		left: 50%;
		margin-left: -0.5em;
		margin-top: -0.5em;
		content: "";
		animation: spin 1s ease-in-out infinite;
		background: url("../images/woocommerce/loader.svg") center center;
		background-size: cover;
		line-height: 1;
		text-align: center;
		font-size: 2em;
		color: rgba(#000, 0.75);
	}
}
